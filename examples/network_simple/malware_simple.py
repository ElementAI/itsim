#!python

from enum import Enum, unique

from greensim import add, advance, local, Process, tagged
from greensim.random import expo, distribution

from itsim import malware, Tag
from itsim.network import Location, Payload
from itsim.types import as_address

from network_simple_overrides import Endpoint, Internet

import network_simple

BAD_NEWS_BEAR_ADDR = "1.2.3.4"
BAD_NEWS_BEAR_PORT = 666
LOCAL_ROUTER_PORT = 777


@unique
class Colors(Enum):
    RED = '\033[31m'
    GREEN = '\033[32m'
    YELLOW = '\033[33m'
    CLOSE = '\033[0m'


def color_tag(t):
    global colors_on

    msg = str(t)

    if not colors_on:
        return msg

    if t == Tag.VULNERABLE:
        return Colors.YELLOW.value + msg + Colors.CLOSE.value
    elif t == Tag.MALWARE:
        return Colors.RED.value + msg + Colors.CLOSE.value
    return msg


def log(ws: Endpoint, action: str, msg: str, color: Colors = None) -> None:
    tags = "<%s>" % ", ".join([color_tag(t) for t in Process.current().iter_tags()])
    local.name = f"{ws.name} / {action} / {tags}"
    if color is not None:
        msg = color.value + msg + Colors.CLOSE.value
    network_simple.get_logger().info(msg)


@malware
def call_home(ws: Endpoint) -> None:
    while True:
        advance(next(expo(10)))
        add(exfiltrate, ws, Payload({"Msg": "Love you, mom",
                                     "dest_addr": Location(BAD_NEWS_BEAR_ADDR, BAD_NEWS_BEAR_PORT)}))


@malware
def no_good(ws: Endpoint) -> None:
    while True:
        advance(next(expo(100)))
        add(sudo_transmit, ws, "my_sin")


@tagged(Tag.VULNERABLE)
def sudo_transmit(ws: Endpoint, filename: str) -> None:
    log(ws, "Priveleged Access", f"Reading {filename}")
    add(exfiltrate, ws, Payload({"SIN": "514-416-604",
                                 "dest_addr": Location(BAD_NEWS_BEAR_ADDR, BAD_NEWS_BEAR_PORT)}))


def exfiltrate(ws: Endpoint, payload: Payload) -> None:
    global BAD_NEWS_BEAR_PORT, BAD_NEWS_BEAR_ADDR, LOCAL_ROUTER_PORT, router_local_addr

    log(ws, "Calling the Mothership", "Query to a malicious server")
    with ws.open_socket(BAD_NEWS_BEAR_PORT) as socket:
        socket.send(Location(router_local_addr, LOCAL_ROUTER_PORT),
                    100,
                    payload)


@malware
def command_and_control(ws: Endpoint) -> None:
    global BAD_NEWS_BEAR_PORT

    with ws.open_socket(BAD_NEWS_BEAR_PORT) as socket:
        while True:
            packet = socket.recv()
            log(ws, "Receiving Data", "Got a nastygram: %s" % packet)


# Define a one-way router for simplicity. I'm not sure about the best way to define one in our current framework
def route(ws: Endpoint) -> None:
    global LOCAL_ROUTER_PORT, router_local_addr

    with ws.open_socket(Location(router_local_addr, LOCAL_ROUTER_PORT)) as i_socket:
        with ws.open_socket(Location(router_inet_addr, LOCAL_ROUTER_PORT)) as world_socket:
            while True:
                msg = i_socket.recv()
                log(ws,
                    "Conducting Traffic",
                    "Routing packet from %s to %s" % (msg.source, msg.payload.entries["dest_addr"]),
                    Colors.GREEN)
                world_socket.send(msg.payload.entries["dest_addr"], msg.byte_size, msg.payload)


sim, time, workstation_list, router, colors_on = network_simple.init()

www = Internet(sim)

infected = next(distribution(workstation_list))
infected.install(call_home)
infected.install(no_good)

router_local_addr = router.address_default
router_inet_addr = as_address(router.link_to(www)._address)
router.install(route)

bad_news_bear = Endpoint("Mama Bear", www, BAD_NEWS_BEAR_ADDR)
bad_news_bear.install(command_and_control)

sim.run(time)
